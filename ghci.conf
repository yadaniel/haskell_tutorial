-- set language
:set -XCPP
:set -XGADTs
:set -XParallelListComp
:set -iA:B:C:D
--
-- alternative syntax
-- {-# LANGUAGE CPP #-}

-- set warnings
-- note: unrecognized warnings will be reported when this file is read
:set -fwarn-safe
:set -fwarn-unused-matches
-- let f x y = 1
-- x and y are unused
:set -fwarn-dodgy-imports
:set -fwarn-dodgy-exports
:set -fwarn-overlapping-patterns
:set -fwarn-incomplete-patterns
-- for example the following code will show the warning incomplete-patterns
-- f 1 = 1
:set -fwarn-incomplete-uni-patterns
-- uni-patterns applies to lambdas, for example
-- f = \1 -> 1
:set -fwarn-missing-methods
:set -fwarn-incomplete-record-updates
-- example for incomplete-record-updates
-- data X a = X {x::a, y::a} | Y
-- v = X 1 1
-- v {x=10}
:set -fwarn-missing-fields
-- example for missing-fields
-- data X a = X {x::a, y::a}
-- v {x=10}
:set -fwarn-unused-imports
:set -fwarn-type-defaults
-- warn haskell selects default type
-- the defaults can be changed with
-- default (Integer, Float)
-- note that with default (Float) even 1 will be Float
-- note that with default (Float, Integer) Integer is never selected
-- note that with default (Word8, Int) 257 will be 1, wrapping around 256
:set -fwarn-name-shadowing
-- let x = 1 in let x = 2 in x
-- -fwarn-missing-signatures

-- alternative syntax
-- {-# OPTIONS_GHC -fwarn-safe #-}

-- other pragmas
-- {-# INCLUDE #-}
-- {-# WARNING #-}
-- {-# DEPRECATED #-}

-- preload modules
import Data.Map as DMap
import Data.Array as DArray
import Data.Set as DSet
import Data.Time as DTime
import Data.Complex as DComplex
import Data.Word as DWord
import Data.Bits as DBits
import Data.Char as DChar
import Data.Bool as DBool
import System.Win32 as SWin32
--
-- alternative syntax
-- :m +Data.Map

-- extend ghci commands
-- example
:def t' \x -> return $ ":t " ++ x ++ " "



